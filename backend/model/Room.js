/**
 * Represents a room in the system.
 * @class
 * @param {Object} params - The parameters for creating a new room.
 * @param {number} [params.roomId] - The unique identifier of the room (optional, generated by the database).
 * @param {string} params.roomName - The name of the room.
 * @param {string} params.roomEmail - The email associated with the room (typically used for contact or booking).
 * @param {boolean} [params.roomStatus=true] - The availability status of the room. `true` means the room is open, and `false` means it's closed.
 * @param {number} params.seats - The number of seats available in the room.
 * @param {boolean|number} params.projector - Whether the room has a projector (1 or 0 from the database, converted to a boolean).
 * @param {string} params.summary - A brief description of the room.
 * @param {string} params.openHour - The opening time of the room (format: 'HH:MM:SS').
 * @param {string} params.closeHour - The closing time of the room (format: 'HH:MM:SS').
 */
export default class Room {
    constructor({
        roomId = undefined, 
        roomName, 
        roomEmail, 
        roomStatus = true, 
        seats, 
        projector, 
        summary, 
        openHour, 
        closeHour
    }) {
      this.roomId = roomId;
      this.roomName = roomName;
      this.roomEmail = roomEmail;
      this.roomStatus = roomStatus ?? true; // Ensure it's a boolean
      this.seats = seats;
      this.projector = Boolean(projector); // Ensure it's a boolean
      this.summary = summary;
      this.openHour = this.extractTime(openHour); // Keep as string or convert to Date if needed
      this.closeHour = this.extractTime(closeHour);
    }

    /**
     * Check if the room is open and available between the given meeting duration.
     * @param {string} meetingStartTime meeting start time.
     * @param {string} meetingEndTime meeting end time
     * @returns {boolean} whether the room is or isn't available.
     */
    isOpen(meetingStartTime, meetingEndTime) {
        if(!this.roomStatus){
            return false
        }

        return meetingStartTime >= this.openHour && meetingEndTime <= this.closeHour;
    }

    /**
     * Check if the room's open hours are valid (its open hour is before its close hour).
     * @returns {boolean} whether or not the room has valid open hours.
     */ 
    hasValidHours() {
        return this.openHour < this.closeHour // will return false of this.openHour >= this.closeHour
    }


    /**
    * Converts a database record or API object into a Room instance.
    * @param {Object} roomData - object containing details abour the room.
    * @param {number} [roomData.room_id] - Unique ID of the room.
    * @param {string} roomData.room_name - Name of the room.
    * @param {string} roomData.room_email - Email associated with the room.
    * @param {boolean} [roomData.room_status] - Whether the room is open or closed (default: true).
    * @param {number} roomData.seats - Number of seats in the room.
    * @param {boolean|number} roomData.projector - Whether the room has a projector (1 or 0 from the database, converted to boolean).
    * @param {string} roomData.summary - Description of the room.
    * @param {string} roomData.open_hour - Opening time (format: "HH:MM:SS").
    * @param {string} roomData.close_hour - Closing time (format: "HH:MM:SS").
    * @returns {Room} A Room object.
    */
    static toModel(roomData) {
        return new Room({
          roomId: roomData.room_id,
          roomName: roomData.room_name,
          roomEmail: roomData.room_email,
          roomStatus: roomData.room_status,
          seats: roomData.seats,
          projector: roomData.projector,
          summary: roomData.summary,
          openHour: roomData.open_hour,
          closeHour: roomData.close_hour
        });
      }

   /**
    * Converts a Room instance back to a plain object (for API responses or DB insertion).
    * @returns an object containing the room data.
    */
    fromModel() {
        return {
            roomId: this.roomId,
            roomName: this.roomName,
            roomEmail: this.roomEmail,
            roomStatus: this.roomStatus ? 1 : 0,
            seats: this.seats,
            projector: this.projector ? 1 : 0, // Convert boolean to BIT (0 or 1) for MSSQL
            summary: this.summary,
            openHour: this.openHour, // this.convertToISO(this.openHour),
            closeHour: this.closeHour // this.convertToISO(this.closeHour)
        };
    }

    /**
     * Convert dateTime string to Time string.
     * @param {string} dateTime Date object with the time to be spliced and extracted.
     * @returns {string} time portion of the Date object.
     */
    extractTime(dateTime) {
        const timeRegex = /^\d{2}:\d{2}:\d{2}$/; // Matches HH:MM:SS
        if(timeRegex.test(dateTime)){ // if dateTime is already in a valid format, just return it
            return dateTime
        }
        // If dateTime is a valid string, extract the time part
        if (dateTime) {
          return new Date(dateTime).toTimeString().split(' ')[0]; // Returns 'HH:mm:ss'
        }

        return '00:00:00'; // Default if the dateTime is invalid or missing
    }

    /**
     * Convert Time string to dateTime string.
     * @param {string} timeString string representation of time (HH:MM:SS)
     * @returns {string} ISO formatted time string
     */
    convertToISO(timeString) {
        console.log(timeString)
        if (!timeString || !/^\d{2}:\d{2}:\d{2}$/.test(timeString)) {
            throw new Error(`Invalid time format. Expected HH:MM:SS, but got ${timeString}`);
        }
        
        const date = new Date(`1970-01-01T${timeString}Z`);
        return date.toISOString();
    }
}