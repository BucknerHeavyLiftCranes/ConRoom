const dbConfig = {
    user: process.env.DB_USER,
    password: process.env.DB_PASSWORD,
    server: process.env.DB_SERVER,
    database: process.env.DB_NAME,
    port: parseInt(process.env.DB_PORT) || 1433,
    options: {
        encrypt: true, // Use encryption
        trustServerCertificate: true, // Use trustServerCertificate based on the environment
    },
}

//manage users vs admins

function authorizeRoles(...allowedRoles) { // rest syntax is used because user may also be an admin in which case theu have extra permissions
    return (req, res, next) => {
        if (!allowedRoles.includes(req.user.role) && req.user.role !== 'admin') { // could be ["user"] or ["user", "admin"]
            res.status(403)
            throw new Error('You do not have permission to access this resource.');
        }
        next();
    };
}

//examples of how the above function would be used:
app.delete('/delete-user/:id', authenticateJWT, authorizeRoles('admin'), (req, res) => {
    // Perform admin action (delete a user)
    const userIdToDelete = req.params.id;
    // Only admin can perform this action
    res.json({ message: `User with ID ${userIdToDelete} deleted.` });
});

// Route accessible by both admins and users
app.get('/profile', authenticateJWT, authorizeRoles('user', 'admin'), (req, res) => {
    res.json({ message: `Welcome ${req.user.username}` });
});

/* REMEMBER IT IS OK TO THROW ERRORS BUT THEY MUST EVENTUALLY BE CAUGHT IN PRODUCTION RUNNING CODE */

// Key Changes for Deployment:
    // Always Encrypted: Enable for sensitive data.
    // Connection Retry Count: Increase to handle temporary failures in cloud environments.
    // Max Pool Size: Increase based on expected production traffic.
    // Min Pool Size: Set to ensure a minimum number of available connections.
    // Load Balance Timeout: Set in a multi-node setup for better balancing.
    
// Summary for Production:
    // Ensure Always Encrypted is enabled if needed for security compliance.
    // Increase Max Pool Size and set an appropriate Min Pool Size to handle more connections.
    // Adjust Connection Timeout, Retry Count, and Retry Interval based on the stability of your production environment.
    // In a multi-node setup, configure Load Balance Timeout to ensure smoother failover and load balancing.
    // Once deployed, these settings help ensure that your application can handle higher traffic, has better resilience to network issues, and complies with necessary security standards.